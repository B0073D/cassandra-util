
// cassandra.connections.some-connection = {
//     seeds: List[String]
//     clustername: String
//     port: Int
//     keyspace: String
//     ssl.enabled: Boolean
//     ssl.protocol: String
//     ssl.provider: String
//     ssl.cipherSuites: List[String]
//     ssl.truststore: String
//     ssl.truststorePassword: String
//     ssl.keystore: String
//     ssl.keystorePassword: String
//     auth.username: String
//     auth.password: String
//     pool.local.coreConnectionsPerHost: Int
//     pool.local.maxConnectionsPerHost: Int
//     pool.local.maxSimultaneousRequestsPerConnectionThreshold: Int
//     pool.local.minSimultaneousRequestsPerConnectionThreshold: Int
//     pool.remote.coreConnectionsPerHost: Int
//     pool.remote.maxConnectionsPerHost: Int
//     pool.remote.maxSimultaneousRequestsPerConnectionThreshold: Int
//     pool.remote.minSimultaneousRequestsPerConnectionThreshold: Int
//     socket.connectTimeout: Milliseconds
//     socket.keepAlive: Boolean
//     socket.readTimeoutMillis: Milliseconds
//     socket.receiveBufferSize: Bytes
//     socket.reuseAddress: Boolean
//     socket.sendBufferSize: Bytes
//     socket.soLingerSecs: Int
//     socket.tcpNoDelay: Boolean
//     retry.policy: Enum[DefaultRetryPolicy, DowngradingConsistencyRetryPolicy, FallthroughRetryPolicy]
//     retry.log: Boolean
//
//     // This driver wrapper supports breaking up application-logical batches up into smaller sub-batches
//     // which are executed concurrently.  This allows you to tune batch sizes independent of application
//     // behavior, which is particularly important since ideal batch size changes between different
//     // Cassandra versions
//     max_unlogged_batch_statements: Int
//     max_counter_batch_statements: Int
//
//     loadbalancer: Policy Definition as below:
//
//     ... .type=DCAwareRoundRobinPolicy
//     ... .localDc: String
//     ... .usedHostsPerRemoteDc: Int
//     ... .allowRemoteDCsForLocalConsistencyLevel: Boolean - NOT RECOMMENDED!!  See http://www.datastax.com/drivers/java/2.0/com/datastax/driver/core/policies/DCAwareRoundRobinPolicy.html#DCAwareRoundRobinPolicy(java.lang.String,%20int,%20boolean)
//     see http://www.datastax.com/drivers/java/2.0/com/datastax/driver/core/policies/DCAwareRoundRobinPolicy.html
//
//     ... .type=LatencyAwarePolicy
//     ... .exclusionThreshold: Double
//     ... .minimumMeasurements: Int
//     ... .retryPeriod: Duration
//     ... .scale: Duration
//     ... .updateRate: Duration
//     ... .childPolicy: Policy Definition [REQUIRED]
//     see http://www.datastax.com/drivers/java/2.0/com/datastax/driver/core/policies/LatencyAwarePolicy.html
//
//     ... .type=TokenAwarePolicy
//     ... .childPolicy: Policy Definition [REQUIRED]
//     see http://www.datastax.com/drivers/java/2.0/com/datastax/driver/core/policies/TokenAwarePolicy.html
//
//     ... .type=WhiteListPolicy
//     ... .whitelist: List[String] [REQUIRED]
//     ... .childPolicy: Policy Definition [REQUIRED]
//     see http://www.datastax.com/drivers/java/2.0/com/datastax/driver/core/policies/WhiteListPolicy.html
//
//     ... .type=RoundRobinPolicy
//     see http://www.datastax.com/drivers/java/2.0/com/datastax/driver/core/policies/RoundRobinPolicy.html
//
//     Default is:
//     loadbalancer = {
//       type = TokenAwarePolicy
//       childPolicy = {
//         type = DCAwareRoundRobinPolicy
//       }
//     }
// }
cassandra = {
  connections = {
    test-defaults = {
      max_unlogged_batch_statements: 1000
      max_counter_batch_statements: 1000

      seeds: ["127.0.0.1"]
      clustername: "test-cluster"
      keyspace: "testing"
      preparedStatementsCacheSize: 10000
      ssl = {
        enabled = true
        provider = "SSL"
        keystore = "some-keystore.jks"
        keystorePassword = "keystore-password"
        truststore = "some-truststore.jks"
        truststorePassword = "truststore-password"
      }
      loadbalancer = {
        type = TokenAwarePolicy
        childPolicy = {
          type = DCAwareRoundRobinPolicy
          usedHostsPerRemoteDc = 0
        }
      }

    }
    test-statement = {
      copyFrom = "test-defaults"
      loadbalancer.childPolicy.localDc="us-west-2"
    }
  }
}
